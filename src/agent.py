# -*- coding: utf-8 -*-

#####################################################################
# This program is free software. It comes without any warranty, to  #
# the extent permitted by applicable law. You can redistribute it   #
# and/or modify it under the terms of the Do What The Fuck You Want #
# To Public License, Version 2, as published by Sam Hocevar. See    #
# http://sam.zoy.org/wtfpl/COPYING for more details.                #
#####################################################################

# The python representation of an agent in the universe.

from pyke import knowledge_engine, krb_traceback
from pyke.knowledge_engine import CanNotProve

import utils

class UAgent:

    def __init__(self, name, can_do, goals, knowledge=[], max_length_plan=5):
        """An agent has a name, a list of actions he can do, and eventually
        a goal to realize (extracted from the (want, name_agent, ...) tuples inserted).
        Its location is chosen when the agent is placed in the universe."""
        self.can_do = can_do
        self.name = name
        self.goals = goals
        self.knowledge = knowledge
        self.max_length_plan = 5
        self.location = None
        self.satisfied = False
        self.ke = None
        self.running_plan = None

    def __str__(self):
        """A nice print of the agent"""
        return """
Agent : %s
Capacities : %s
Goals : %s
Knowledge : %s
Location : %s
Satisfied : %s
        """ % (self.name, self.can_do, self.goals, self.knowledge, self.location, self.satisfied)

    def step(self, universe):
        """The agent generates his plan and tries to execute it."""
        self.ke = universe.ke

        if (self.satisfied):
            return

        # Generate a new plan if needed
        if self.running_plan is None:
            plan = None
            for goal in self.goals:

                initial_state = []

                # Extract informations from the knowledge.
                initial_state.extend(self.knowledge)

                if type(goal[0]) != tuple:
                    final_state = (goal,)
                else:
                    final_state = goal

                # reset the knowledge engine
                self.ke.reset()
                try:
                    self.ke.activate('universe_rules', 'facts',
                                     'actions_plan', 'planning',
                                     'actions_exec', 'execution')
                except:
                    krb_traceback.print_exc()
                try:
                    # Generate the plan (can fail)
                    plan = self.gen_plan(initial_state, final_state)
                    if plan is None:
                        # Successfully generated a no-op plan
                        self.goals.remove(goal)
                    break
                except CanNotProve as e:
                    # Cannot prove the plan, so do nothing.
                    continue

            if plan is not None:
                plan = list(plan)
                self.running_plan = plan
                self.running_goal = goal

        # Execute running plan
        if self.running_plan is not None:
            success = self.execute(universe)
            if success:
                if (len(self.running_plan) == 0):
                    self.running_plan = None
                    self.goals.remove(self.running_goal)
                    self.running_goal = None

        # If the agent has completed all its goals, it is satisfied.
        if len(self.goals) == 0:
            self.satisfied = True

    def execute(self, universe):
        """Execute the first action of the plan."""
        plan = self.running_plan
        name = self.name
        
        # The action is executed in the real world
        i_state = tuple(universe.facts)
        action = plan[0]
        try:
            vars, plan2 = self.ke.prove_1_goal(
                'execution.execute(%s, %s, %s, $next)' %
                    (name, action, i_state))
            # Execute the plan generated by Pyke to update the universe.
            plan2(universe)

        except CanNotProve as e:
            # Execution of this action has failed, return
            print "> %s failed to execute %s" % (self.name, action)
            return False
        self.running_plan.remove(action)

        # If new information was obtained, generate a new plan.
        if (action[0] == 'ask_if' or action[0] == 'ask_ref'):
            self.running_goal = None
            self.running_plan = None
            return False
        return True


    def gen_plan(self, initial_state, final_state):
        """Generates a plan (sequence of actions) in order to reach a goal.
        The initial_state represents the current state of the universe as seen by the agent.
        The final_state represents the future state of the universe (after execution of the plan)
        as seen by the agent."""
        
        # print 'Initial state : %s' % (tuple(initial_state),)
        # print 'Final state : %s' % (tuple(final_state),)
        
        vars, plan = self.ke.prove_1_goal('planning.plan(%s, %s, %s, $plan, %s)'
           % (self.name, tuple(initial_state), tuple(final_state), self.max_length_plan))
           
        return vars["plan"]

    def update_knowledge(self, new_fact):
        """Update this agent's knowledge with a new fact."""
        utils.update(self.knowledge, ('know', self.name, new_fact))
