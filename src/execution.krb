#####################################################################
# This program is free software. It comes without any warranty, to  #
# the extent permitted by applicable law. You can redistribute it   #
# and/or modify it under the terms of the Do What The Fuck You Want #
# To Public License, Version 2, as published by Sam Hocevar. See    #
# http://sam.zoy.org/wtfpl/COPYING for more details.                #
#####################################################################


#############################################################################
#                           EXECUTION                                       #
#############################################################################

# Executes 1 action from a plan. Very similar to planning.transition, but uses
# action predicates form the action_exec rule base.
#
# In this flavor, the agent who planned is the one who executes.
# 
# parameters:
#
#   $self       (input)     The agent executing the action
#   $action     (input)     The action to be executed
#   $i_state    (input)     State of the universe before execution
#   $f_state    (output)    State of the universe after execution
#
execute_action_self
    use execute($self, $action, $i_state, $f_state) taking (universe)
    when
        ($type, $agent, $args) = $action
        check $self == $agent
        universe.can_do($self, $type)
        # Check if the action is valid
        actions_exec.action($type, $self, $args, ($cond_pos, $cond_neg), $dele, $add)
            $$(True, universe)

        python from utils import remove, union, includes, not_any
        check not_any($i_state, $cond_neg)
        check includes($i_state, $cond_pos, False)

        # Update final state
        python state = remove($i_state, $dele)
        python state2 = union(state, $add)
        $f_state = state2
